var mongoose = require('mongoose');
const mongoosePaginate = require('mongoose-paginate-v2');
let schema = {
  userId: { type: String, required: true },
  title: { type: String, default:"" },
  rtmpLink: { type: String },
  videoLink: { type: String },
  imageLink: { type: String },
  isLive: { type: Boolean, default: false },
  eventType: { type: String },
  startTime: { type: String },
  endTime: { type: String },
  date: { type: String },
  serviceType: { type: String },
  sessionType: { type: String, default: "once" },
  createdDate: { type: Date },
  status: { type: String, default: "approved" },
  likeCounts: { type: Number, default: 0, min: 0 },
  viewsCounts: { type: Number, default: 0, min: 0 },
  commentsCount: { type: Number, default: 0 },
  flagCount: { type: Number, default: 0, min: 0 },
  heartCount: { type: Number, default: 0, min: 0 },
  flowerCount: { type: Number, default: 0, min: 0 },
  cakeCount: { type: Number, default: 0, min: 0 },
  crakersCount: { type: Number, default: 0, min: 0 },
  viewedUserList: { type: Array },
  likedUserList: { type: Array },
  buttonName: { type: String },
  buttonLink: { type: String },
  uId: { type: mongoose.Schema.Types.ObjectId, ref: 'Users' },
  currentSlotId: { type: mongoose.Schema.Types.ObjectId, ref: 'liveRewardHistory',default: null  },
  videoMeta: { type: Object, default: {} },
  hostName: { type: String },
  hostImage: { type: String },
  purpose: { type: String },
  isBlock: { type: Boolean, default: false },
  eventTime: { type: Date },
  eventEndTime: { type: Date },
  hostAttended: { type: Boolean, default: false },
  isScheduled: { type: Boolean, default: false },
  lastModifiedHearBeat: { type: Date },
  frequency: { type:Number, default:0 },
  createdBy: { type: String },
};
var eventSchema = new mongoose.Schema(schema, { timestamps: true });
eventSchema.plugin(mongoosePaginate);
module.exports = mongoose.model('Events', eventSchema);